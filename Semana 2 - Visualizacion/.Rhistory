2+2
install.packages("tidyverse")
install.packages("tidymodels")
install.packages("janitor")
install.packages("openxlsx")
install.packages("h2o")
library(dplyr)    # for data manipulation
library(ggplot2)  # for data visualization
library(h2o)  # for fitting autoencoders
mnist <- dslabs::read_mnist()
install.packages("dslabs")
mnist <- dslabs::read_mnist()
names(mnist)
h2o.no_progress()  # turn off progress bars
h2o.init(max_mem_size = "5g")  # initialize H2O instance
library(dplyr)    # for data manipulation
library(ggplot2)  # for data visualization
library(h2o)  # for fitting autoencoders
mnist <- dslabs::read_mnist()
names(mnist)
h2o.no_progress()  # turn off progress bars
h2o.init(max_mem_size = "5g")  # initialize H2O instance
h2o.init()  # initialize H2O instance
features <- as.h2o(mnist$train$images)
install.packages("data.table")
install.packages("bit64")
# Train an autoencoder
ae1 <- h2o.deeplearning(
x = seq_along(features),
training_frame = features,
autoencoder = TRUE,
hidden = 2,
activation = 'Tanh',
sparse = TRUE
)
ae1_codings <- h2o.deepfeatures(ae1, features, layer = 1)
ae1_codings
hyper_grid <- list(hidden = list(
c(50),
c(100),
c(300, 100, 300),
c(100, 50, 100),
c(250, 100, 50, 100, 250)
))
# Execute grid search
ae_grid <- h2o.grid(
algorithm = 'deeplearning',
x = seq_along(features),
training_frame = features,
grid_id = 'autoencoder_grid',
autoencoder = TRUE,
activation = 'Tanh',
hyper_params = hyper_grid,
sparse = TRUE,
ignore_const_cols = FALSE,
seed = 123
)
h2o.shutdown()
install.packages("devtools")
install.packages("sf")
remotes::install_github("r-spatial/rgee")
library(rgee)
ee_install()
Y
library(rgee)
ee_check()
ee_clean_credentials()
ee_clean_pyenv()
ee_Initialize()
library(reticulate)
ee_Initialize()
ee_check()
ee_Initialize()
ee_reattach()
library(rgee)
ee_check()
sessionInfo()
library(rgee)
ee_check()
ee_Initialize()
sessionInfo()
library(rgee)
ee_check()
ee_Initialize()
install.packages("mapview")
library(reticulate)
ee_Initialize()
ee_check()
remotes::install_github("r-spatial/rgee")
install.packages("rgee")
ininstall.packages("rgee")
install.packages("rgee")
library(rgee)
ee_check()
ee_check()
ee_check()
ee_Initialize()
library(rgee)
ee_check()
ee_Initialize()
ee_install()
library(rgee)
ee_check()
ee_Initialize()
?ee_install
h
ee_check()
getwd()
#1) Cargar paquetes
library(readr) # para cargar datos
library(dplyr) # para manejo de datos
library(ggplot2)
# Cargar datos
datos_mundo <- read_csv("datos/datos_mundo.csv")
library(rgee)
ee_check()
ee_Initialize()
reticulate::py_config()
library(rgee)
ee_check()
ee_Initialize()
traceback()
1
library(rgee)
ee_check()
ee_Initialize()
traceback()
library(rgee)
earthengine_python <- Sys.getenv("EARTHENGINE_PYTHON", unset = NA)
print(earthengine_python)
Sys.setenv(RETICULATE_PYTHON = earthengine_python)
ee_current_version <- system.file("python/ee_utils.py", package = "rgee")
ee_utils <- rgee:::ee_source_python(ee_current_version)
print(ee_utils$ee$'__version__')
ee_check()
library(rgee)
ee_check()
earthengine_python <- Sys.getenv("EARTHENGINE_PYTHON", unset = NA)
print(earthengine_python)
Sys.setenv(RETICULATE_PYTHON = earthengine_python)
ee_current_version <- system.file("python/ee_utils.py", package = "rgee")
ee_utils <- rgee:::ee_source_python(ee_current_version)
print(ee_utils$ee$'__version__')
ee_check()
earthengine_python <- Sys.getenv("EARTHENGINE_PYTHON", unset = NA)
print(earthengine_python)
Sys.setenv(RETICULATE_PYTHON = earthengine_python)
ee_current_version <- system.file("python/ee_utils.py", package = "rgee")
ee_utils <- rgee:::ee_source_python(ee_current_version)
library(rgee)
earthengine_python <- Sys.getenv("EARTHENGINE_PYTHON", unset = NA)
print(earthengine_python)
Sys.setenv(RETICULATE_PYTHON = earthengine_python)
ee_current_version <- system.file("python/ee_utils.py", package = "rgee")
ee_utils <- rgee:::ee_source_python(ee_current_version)
print(ee_utils$ee$'__version__')
ee_check()
library(rgee)
ee_check()
earthengine_python <- Sys.getenv("EARTHENGINE_PYTHON", unset = NA)
print(earthengine_python)
Sys.setenv(RETICULATE_PYTHON = earthengine_python)
ee_current_version <- system.file("python/ee_utils.py", package = "rgee")
ee_utils <- rgee:::ee_source_python(ee_current_version)
print(ee_utils$ee$'__version__')
traceback()
library(rgee)
ee_check()
library(rgee)
earthengine_python <- Sys.getenv("EARTHENGINE_PYTHON", unset = NA)
print(earthengine_python)
Sys.setenv(RETICULATE_PYTHON = earthengine_python)
ee_current_version <- system.file("python/ee_utils.py", package = "rgee")
ee_utils <- rgee:::ee_source_python(ee_current_version)
print(ee_utils$ee$'__version__')
ee_check()
ee_Initialize()
createTimeBand <-function(img) {
year <- ee$Date(img$get('system:time_start'))$get('year')$subtract(1991L)
ee$Image(year)$byte()$addBands(img)
}
collection <- ee$
ImageCollection('NOAA/DMSP-OLS/NIGHTTIME_LIGHTS')$
select('stable_lights')$
map(createTimeBand)
ee_print(col_reduce)
col_reduce <- collection$reduce(ee$Reducer$linearFit())
col_reduce <- col_reduce$addBands(
col_reduce$select('scale'))
ee_print(col_reduce)
Map$setCenter(9.08203, 47.39835, 3)
Map$addLayer(
eeObject = col_reduce,
visParams = list(
bands = c("scale", "offset", "scale"),
min = 0,
max = c(0.18, 20, -0.18)
),
name = "stable lights trend"
)
library(tidyverse)
library(rgee)
library(sf)
nc <- st_read(system.file("shape/nc.shp", package = "sf"), quiet = TRUE)
terraclimate <- ee$ImageCollection("IDAHO_EPSCOR/TERRACLIMATE")$
filterDate("2001-01-01", "2002-01-01")$
map(function(x) x$reproject("EPSG:4326")$select("pr"))
ee_nc_rain <- ee_extract(x = terraclimate, y = nc, sf = FALSE)
colnames(ee_nc_rain) <- sprintf("%02d", 1:12)
ee_nc_rain$name <- nc$NAME
ee_nc_rain %>%
pivot_longer(-name, names_to = "month", values_to = "pr") %>%
ggplot(aes(x = month, y = pr, group = name, color = pr)) +
geom_line(alpha = 0.4) +
xlab("Month") +
ylab("Precipitation (mm)") +
theme_minimal()
nc <- st_read(system.file("shape/nc.shp", package = "sf"), quiet = TRUE)
terraclimate <- ee$ImageCollection("IDAHO_EPSCOR/TERRACLIMATE")$
filterDate("2001-01-01", "2002-01-01")$
map(function(x) x$reproject("EPSG:4326")$select("pr"))
ee_nc_rain <- ee_extract(x = terraclimate, y = nc, sf = FALSE)
install.packages("geojsonio")
terraclimate <- ee$ImageCollection("IDAHO_EPSCOR/TERRACLIMATE")$
filterDate("2001-01-01", "2002-01-01")$
map(function(x) x$reproject("EPSG:4326")$select("pr"))
ee_nc_rain <- ee_extract(x = terraclimate, y = nc, sf = FALSE)
colnames(ee_nc_rain) <- sprintf("%02d", 1:12)
ee_nc_rain$name <- nc$NAME
ee_nc_rain %>%
pivot_longer(-name, names_to = "month", values_to = "pr") %>%
ggplot(aes(x = month, y = pr, group = name, color = pr)) +
geom_line(alpha = 0.4) +
xlab("Month") +
ylab("Precipitation (mm)") +
theme_minimal()
library(tidyverse)
library(rgee)
library(sf)
nc <- st_read(system.file("shape/nc.shp", package = "sf"), quiet = TRUE)
terraclimate <- ee$ImageCollection("IDAHO_EPSCOR/TERRACLIMATE")$
filterDate("2001-01-01", "2002-01-01")$
map(function(x) x$reproject("EPSG:4326")$select("pr"))
ee_nc_rain <- ee_extract(x = terraclimate, y = nc, sf = FALSE)
library(tidyverse)
library(rgee)
library(sf)
ee_Initialize()
nc <- st_read(system.file("shape/nc.shp", package = "sf"), quiet = TRUE)
terraclimate <- ee$ImageCollection("IDAHO_EPSCOR/TERRACLIMATE")$
filterDate("2001-01-01", "2002-01-01")$
map(function(x) x$reproject("EPSG:4326")$select("pr"))
ee_nc_rain <- ee_extract(x = terraclimate, y = nc, sf = FALSE)
colnames(ee_nc_rain) <- sprintf("%02d", 1:12)
ee_nc_rain$name <- nc$NAME
ee_nc_rain %>%
pivot_longer(-name, names_to = "month", values_to = "pr") %>%
ggplot(aes(x = month, y = pr, group = name, color = pr)) +
geom_line(alpha = 0.4) +
xlab("Month") +
ylab("Precipitation (mm)") +
theme_minimal()
dev.off()
ee_check()
library(tidyverse)
library(rgee)
library(sf)
ee_Initialize()
library(tidyverse)
library(rgee)
library(sf)
ee_check()
ee_Initialize()
library(tidyverse)
library(rgee)
library(sf)
ee_Initialize()
rm(list = ls())
getwd()
read_csv("datos_mundo.csv")
read_csv(file.choose())
library(readr)
read_csv("datos_mundo.csv")
read_csv(file.choose())
getwd()
getwd()
read_csv("datos_mundo.csv")
setwd("C:/Users/pjagu/Dropbox/CLASES UDP/Curso UDP Data Science/Version 2020/Semana 1/datos")
getwd()
read_csv("datos_mundo.csv")
setwd("C:/Users/pjagu/Dropbox/CLASES UDP/Curso UDP Data Science/Version 2020")
getwd()
read_csv("datos_mundo.csv")
setwd("C:/Users/pjagu/Dropbox/CLASES UDP/Curso UDP Data Science/Version 2020/Semana 1/")
setwd("C:/Users/pjagu/Dropbox/CLASES UDP/Curso UDP Data Science/Version 2020/")
getwd()
read_csv("Semana 1/datos/datos_mundo.csv")
setwd("C:/Users/pjagu/Dropbox/CLASES UDP/Curso UDP Data Science/Version 2020/Semana 2")
# Cargar datos
datos_ejercicio <- read_csv("datos/datos_mundo_ejercicio.csv")
# Hacer un histograma de "ExpVida" utilizando 15 divisiones/barras (bins)
ggplot(datos_ejercicio, aes(x = ExpVida)) +
geom_histogram(bins = 15)
# Cargar paquetes
library(readr)
library(ggplot2)
# Hacer un histograma de "ExpVida" utilizando 15 divisiones/barras (bins)
ggplot(datos_ejercicio, aes(x = ExpVida)) +
geom_histogram(bins = 15)
# Hacer un gráfico de puntos de "anio" (x) vs "ExpVida" (y)
ggplot(datos_ejercicio, aes(x = anio, y = ExpVida)) +
geom_point()
# Repetir el gráfico anterior y diferenciar los puntos con un color distinto según su continente
ggplot(datos_ejercicio, aes(x = anio, y = ExpVida, *** = continente)) +
geom_***()
# Repetir el gráfico anterior y diferenciar los puntos con un color distinto según su continente
ggplot(datos_ejercicio, aes(x = anio, y = ExpVida, col = continente)) +
geom_point()
# Agregar al gráfico anterior un geom de lineas (geom_line)
ggplot(datos_ejercicio, aes(x = anio, y = ExpVida, col = continente)) +
geom_point() +
geom_line()
# Agregar al gráfico anterior un geom de lineas (geom_line)
ggplot(datos_ejercicio, aes(x = anio, y = ExpVida)) +
geom_point(aes(col = continente)) +
geom_line()
# Agregar al gráfico anterior un geom de lineas (geom_line)
ggplot(datos_ejercicio, aes(x = anio, y = ExpVida)) +
geom_point(aes(col = continente))
# Agregar al gráfico anterior un geom de lineas (geom_line)
ggplot(datos_ejercicio, aes(x = anio, y = ExpVida, col = col = continente)) +
geom_point()
# Agregar al gráfico anterior un geom de lineas (geom_line)
ggplot(datos_ejercicio, aes(x = anio, y = ExpVida, col = continente)) +
geom_point()
# Agregar al gráfico anterior un geom de lineas (geom_line)
ggplot(datos_ejercicio, aes(x = anio, y = ExpVida, col = continente)) +
geom_point() +
geom_line()
# Agregar al gráfico anterior un geom de lineas (geom_line)
ggplot(datos_ejercicio, aes(x = anio, y = ExpVida)) +
geom_point(aes(col = continente)) +
geom_line()
# Agregar al gráfico anterior un geom de lineas (geom_line)
ggplot(datos_ejercicio, aes(x = anio, y = ExpVida)) +
geom_point(aes(col = continente)) +
geom_line(aes(col = continente))
# Agregar al gráfico anterior un geom de lineas (geom_line)
ggplot(datos_ejercicio, aes(x = anio, y = ExpVida, col = continente)) +
geom_point() +
geom_line()
?theme
data.frame(
educ = c("Finish no school", "Finish 1 year", "Finish 3 years", "Graduate, 2.0 GPA", "Graduate, 3.0 GPA", "Graduate, 3.75 GPA"),
inc = c(480, 520, 650, 810, 940, 1070))
