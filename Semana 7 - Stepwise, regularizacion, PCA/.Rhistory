ggplot(aes(x = n_predictores, y = metrica)) +
geom_line() +
geom_point()
data.frame(n_predictores = 1:19,
metrica = summary(mejores_modelos_forward)$bic) %>%
ggplot(aes(x = n_predictores, y = metrica)) +
geom_line() +
geom_point() +
scale_x_continuous()
data.frame(n_predictores = 1:19,
metrica = summary(mejores_modelos_forward)$bic) %>%
ggplot(aes(x = n_predictores, y = metrica)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks = c(0:19))
data.frame(n_predictores = 1:19,
metrica = summary(mejores_modelos_forward)$bic) %>%
ggplot(aes(x = n_predictores, y = metrica)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks = c(0:19)) +
theme_minimal()
graf_metricas <- function(x){
data.frame(n_predictores = 1:19,
metrica = summary(mejores_modelos_forward)$x) %>%
ggplot(aes(x = n_predictores, y = metrica)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks = c(0:19)) +
theme_minimal() +
labs(x = NULL, y = NULL)
}
graf_metricas(bic)
resumen <- summary(mejores_modelos_forward)
graf_metricas <- function(x){
data.frame(n_predictores = 1:19,
metrica = resumen$x) %>%
ggplot(aes(x = n_predictores, y = metrica)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks = c(0:19)) +
theme_minimal() +
labs(x = NULL, y = NULL)
}
graf_metricas(bic)
resumen
resumen$bic
resumen["bic"]
resumen[["bic"]]
graf_metricas <- function(x){
data.frame(n_predictores = 1:19,
metrica = resumen[[x]]) %>%
ggplot(aes(x = n_predictores, y = metrica)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks = c(0:19)) +
theme_minimal() +
labs(x = NULL, y = NULL)
}
graf_metricas("bic")
graf_metricas <- function(x){
data.frame(n_predictores = 1:19,
metrica = resumen[[x]]) %>%
ggplot(aes(x = n_predictores, y = metrica)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks = c(0:19)) +
theme_minimal() +
labs(x = NULL, y = NULL, title = x)
}
graf_metricas("bic")
resumen %>% names
names(resumen)[4:7]
names(resumen)[4:6]
?purrr
purrr(names(resumen)[4:6], graf_metricas)
library(tidyverse)
purrr(names(resumen)[4:6], graf_metricas)
tidyverse::tidyverse_packages()
library(purrr)
purrr(names(resumen)[4:6], graf_metricas)
library(knitr)
library(hrbrthemes)
library(fontawesome)
library(tidyverse)
options(htmltools.dir.version = FALSE)
opts_chunk$set(
fig.align="center",
fig.height=4, #fig.width=6,
# out.width="748px", #out.length="520.75px",
dpi=300, #fig.path='Figs/',
cache=T,#, echo=F, warning=F, message=F,
echo = TRUE,
message = FALSE,
warning = FALSE,
error = FALSE
)
map(names(resumen)[4:6], graf_metricas)
graf_forward <- map(names(resumen)[4:6], graf_metricas)
graf_forward[[1]] | graf_forward[[2]] | graf_forward[[3]]
library(patchwork)
graf_forward[[1]] | graf_forward[[2]] | graf_forward[[3]]
graf_forward[[1]] / graf_forward[[2]] / graf_forward[[3]]
coef(object = mejores_modelos_forward,
id = which.min(resumen_forward$bic))
resumen_forward <- summary(mejores_modelos_forward)
coef(object = mejores_modelos_forward,
id = which.min(resumen_forward$bic))
?regsubsets
library(glmnet)
x <- as.matrix(Hitters[,-1])
Hitters %>% names
x <- Hitters %>% select(-Salary) %>% as.matrix()
x
Hitters %>% select(-Salary)
x <- Hitters %>% select(-Salary) %>% model.matrix()
model.matrix(Salary~.,)
model.matrix(Salary~., data = Hitters)
model.matrix(Salary~., data = Hitters)[,-1]
?model.matrix
y <- Hitters %>% pull(Salary)
x
x
y
modelos_lasso <- glmnet(x = x, y = y, alpha = 1)
y
datos <- Hitters %>% filter(!is.na(Salary))
x <- model.matrix(Salary~., data = datos)[,-1]
y <- datos %>% pull(Salary)
modelos_lasso <- glmnet(x = x, y = y, alpha = 1)
plot(modelos_lasso, xvar = "lambda", label = TRUE)
exp(-2)
exp(4)
set.seed(1)
cv_error_lasso <- cv.glmnet(x = x, y = y, alpha = 1, nfolds = 10)
plot(cv_error_lasso)
cv_error_lasso$lambda.min
cv_error_lasso$lambda.1se
exp(4.3)
exp(4.1)
log(cv_error_lasso$lambda.1se)
"1se" = cv_error_lasso$lambda.1se
c("min" = cv_error_lasso$lambda.min,
"1se" = cv_error_lasso$lambda.1se)
install.packages("pls")
Hitters
library(pls)
pca <- Hitters %>%
select(-Salary) %>%
prcomp(scale. = TRUE)
Hitters
pca <- x %>%
prcomp(scale. = TRUE)
pca
biplot(pca)
biplot(x = pca, scale = 0, cex = 0.6, col = c("blue4", "brown3"))
prop_varianza <- pca$sdev^2 / sum(pca$sdev^2)
prop_varianza
data.frame(n_componentes = 1:19,
varianza = prop_varianza)
data.frame(n_componentes = 1:19,
varianza = prop_varianza) %>%
ggplot(aes(x = n_componentes, y = varianza)) +
geom_line()
prop_varianza <- cumsum(pca$sdev^2 / sum(pca$sdev^2))
data.frame(n_componentes = 1:19,
varianza = prop_varianza) %>%
ggplot(aes(x = n_componentes, y = varianza)) +
geom_line()
data.frame(n_componentes = 1:19,
varianza = prop_varianza) %>%
ggplot(aes(x = n_componentes, y = varianza)) +
geom_line() +
geom_point() +
theme_minimal() + scale_x_continuous(breaks = 0:19)
summary(pca)
summary(pca)[1]
summary(pca)[2]
summary(pca)$rotation
summary(pca)$rotation %>% cor()
summary(pca)$rotation %>% cor() %>% corrplot()
summary(pca)$rotation %>% cor() %>% corrplot::corrplot()
summary(pca)$rotation %>% cor()
summary(pca)$rotation %>% cor() %>% corrplot::corrplot()
summary(pca)$rotation %>% cor()
summary(pca)$rotation %>% cor() %>% corrplot::corrplot()
summary(pca)
prop_varianza <- cumsum(pca$sdev^2 / sum(pca$sdev^2))
data.frame(n_componentes = 1:19,
varianza = prop_varianza) %>%
ggplot(aes(x = n_componentes, y = varianza)) +
geom_line() +
geom_point() +
theme_minimal() + scale_x_continuous(breaks = 0:19)
pca <- x %>%
prcomp(scale = TRUE)
summary(pca)
install.packages("faraway")
library(faraway)
?faraway
library(faraway)
?faraway
faraway::melanoma
faraway::babyfood
faraway::meatspec
meatspec
glimpse(meatspec)
nameS(meatspec)
names(meatspec)
?meatspec
set.seed(1)
split <- initial_split(data = meatspec, prop = 0.7)
datos_train <- training(split)
library(tidymodels)
set.seed(1)
split <- initial_split(data = meatspec, prop = 0.7)
datos_train <- training(split)
datos_test <- testing(split)
split <- initial_split(data = meatspec, prop = 0.75)
set.seed(1)
split <- initial_split(data = meatspec, prop = 0.75)
datos_train <- training(split)
datos_test <- testing(split)
set.seed(1)
split <- initial_split(data = meatspec, prop = 0.8)
datos_train <- training(split)
datos_test <- testing(split)
modelo_mco <- lm(fat ~ ., data = datos_train)
glance(modelo_mco)
glance(modelo_mco)$adj.r.squared
tidy(modelo_mco)
tidy(modelo_mco) %>%
filter(abs(statistic) >= 1.96)
tidy(modelo_mco) %>%
filter(abs(statistic) >= 1.96) %>%
pull(term)
ecm_train <- mean((modelo_mco$fitted.values-datos_train$fat)^2)
ecm_train
(ecm_test <- mean((modelo_mco$fitted.values-datos_test$fat)^2))
(ecm_test <- mean((predict(modelo_mco, newdata = datos_test)-datos_test$fat)^2))
modelo_forward <- regsubsets(Salary~., data = datos_train, nvmax = ncol(datos_train)-1,
method = "forward")
modelo_forward <- regsubsets(fat~., data = datos_train, nvmax = ncol(datos_train)-1,
method = "forward")
modelo_forward
summary(modelo_forward)
?regsubsets
summary(mejores_modelos_forward)$which
summary(mejores_modelos_forward)$bic
which.min(summary(mejores_modelos_forward)$bic)
summary(mejores_modelos_forward)$bic %>% which.min()
summary(mejores_modelos_forward)
modelo_forward <- regsubsets(fat~., data = datos_train,
method = "forward")
summary(mejores_modelos_forward)$bic
ncol(datos_train)
modelo_forward
modelo_forward$nvmax
ncol(datos_train)-1
modelo_forward$nbest
?step
modelo_forward <- step(fat~., data = datos_train, k = log(nrow(datos_train)),
direction = "forward")
modelo_forward
summary(modelo_forward)
modelo_forward$coefficients
summary(modelo_forward)
summary(modelo_forward)$coefficients
modelo_forward <- step(scope = modelo_mco, data = datos_train, k = log(nrow(datos_train)),
direction = "forward")
modelo_forward <- step(object = lm(fat~1, data = datos_train),
scope = modelo_mco,
k = log(nrow(datos_train)),
direction = "forward")
modelo_forward <- step(object = lm(fat~1, data = datos_train),
scope = formula(modelo_mco),
k = log(nrow(datos_train)),
direction = "forward",
trace = FALSE)
modelo_forward <- stats::step(object = lm(fat~1, data = datos_train),
scope = formula(modelo_mco),
k = log(nrow(datos_train)),
direction = "forward",
trace = FALSE)
modelo_forward$coefficients
null <- lm(Salary ~ 1, data = Hitters)
full <- lm(Salary ~ ., data = Hitters)
mejor_modelos_forward <- stats::step(object = null,
scope = full,
direction = "forward",
k = log(nrow(Hitters)),
trace = FALSE)
mejor_modelos_forward
full
mejor_modelos_forward <- stats::step(object = null,
scope = full,
direction = "forward",
k = log(nrow(Hitters)),
trace = FALSE)
mejor_modelos_forward
summary(mejor_modelos_forward)
mejor_modelos_forward <- stats::step(null,
scope = full,
direction = "forward",
k = log(nrow(Hitters)),
trace = FALSE)
mejor_modelos_forward
null <- lm(Salary ~ 1, data = Hitters)
full <- lm(Salary ~ ., data = Hitters)
mejor_modelos_forward <- stats::step(null,
scope = full,
direction = "forward",
k = log(nrow(Hitters)),
trace = FALSE)
mejor_modelos_forward <- stats::step(null,
scope = full,
direction = "forward")
mejor_modelos_forward <- stats::step(object = null,
scope = formula(full),
direction = "forward",
k = log(nrow(Hitters)),
trace = FALSE)
mejor_modelos_forward
mejor_modelo_forward <- stats::step(object = null,
scope = formula(full),
direction = "forward",
k = log(nrow(Hitters)),
trace = FALSE)
mejor_modelo_forward
summary(mejor_modelo_forward)
tidy(mejor_modelo_forward)
null <- lm(fat ~ 1, data = datos_train)
full <- lm(fat ~ .^2, data = datos_train)
modelo_forward <- stats::step(object = null,
scope = formula(full),
k = log(nrow(datos_train)),
direction = "forward",
trace = FALSE)
modelo_forward
modelo_forward <- stats::step(object = null,
scope = formula(modelo_mco),
k = log(nrow(datos_train)),
direction = "forward",
trace = FALSE)
modelo_forward
tidy(modelo_forward)
tidy(modelo_mco) %>%
filter(abs(statistic) >= 1.96) %>%
pull(term)
modelo_forward$fitted.values
(ecm_forward_train <- mean((modelo_forward$fitted.values - datos_train$fat)^2))
(ecm_forward_test <- mean((predict(modelo_forward, newdata = datos_test) - datos_test$fat)^2))
(ecm_mco_test <- mean((predict(modelo_mco, newdata = datos_test) - datos_test$fat)^2))
(ecm_forward_train <- mean((modelo_forward$fitted.values - datos_train$fat)^2))
(ecm_forward_test <- mean((predict(modelo_forward, newdata = datos_test) - datos_test$fat)^2))
(ecm_mco_train <- mean((modelo_mco$fitted.values - datos_train$fat)^2))
(ecm_mco_test <- mean((predict(modelo_mco, newdata = datos_test) - datos_test$fat)^2))
modelo_forward <- stats::step(object = null,
scope = formula(modelo_mco),
k = log(nrow(datos_train)),
direction = "forward",
trace = FALSE,
steps = 10000)
tidy(modelo_forward)
modelo_forward <- stats::step(object = null,
scope = formula(modelo_mco),
k = log(nrow(datos_train)),
direction = "forward",
trace = FALSE,
steps = 10000000)
tidy(modelo_forward)
stats::step(object = null,
scope = formula(modelo_mco),
k = log(nrow(datos_train)),
direction = "forward")
pca <- datos_train %>% prcomp(scale = TRUE)
summary(pca)$importance[, 1:9]
summary(pca)
summary(pca)$importance[, 1:9]
modelo_pcr <- pcr(formula = fat ~ ., data = datos_train,
scale. = TRUE, ncomp = 4)
(ecm_forward_train <- mean((modelo_pcr$fitted.values - datos_train$fat)^2))
(ecm_forward_test <- mean((predict(modelo_pcr, newdata = datos_test) - datos_test$fat)^2))
(ecm_forward_train <- mean((modelo_pcr$fitted.values - datos_train$fat)^2))
(ecm_forward_test <- mean((predict(modelo_pcr, newdata = datos_test) - datos_test$fat)^2))
(ecm_forward_test <- mean((predict(modelo_pcr, newdata = datos_test, ncom = 4) - datos_test$fat)^2))
(ecm_forward_train <- mean((modelo_pcr$fitted.values - datos_train$fat)^2))
(ecm_forward_test <- mean((predict(modelo_pcr, newdata = datos_test, ncom = 4) - datos_test$fat)^2))
(ecm_forward_train <- mean((modelo_pcr$fitted.values - datos_train$fat)^2))
set.seed(1)
modelo_pcr_cv <- pcr(formula = fat ~ ., data = training,
scale. = TRUE, validation = "CV")
set.seed(1)
modelo_pcr_cv <- pcr(formula = fat ~ ., data = datos_train,
scale. = TRUE, validation = "CV")
modelo_pcr_CV <- MSEP(modelo_pcr_cv, estimate = "CV")
which.min(modelo_pcr_CV$val)
modelo_pcr_CV
(ecm_pcr_test <- mean((predict(modelo_pcr, newdata = datos_test, ncomp = 4) - datos_test$fat)^2))
(ecm_pcr_cv_test <- mean((predict(modelo_pcr, newdata = datos_test,
ncomp = which.min(modelo_pcr_CV$val)) - datos_test$fat)^2))
predict(modelo_pcr, newdata = datos_test,
ncomp = which.min(modelo_pcr_CV$val))
(ecm_pcr_cv_test <- mean((predict(modelo_pcr, newdata = datos_test, ncomp = 21) - datos_test$fat)^2))
modelo_pcr_CV <- MSEP(modelo_pcr, estimate = "CV")
modelo_pcr_cv <- pcr(formula = fat ~ ., data = datos_trai,
scale. = TRUE, validation = "CV")
modelo_pcr_cv <- pcr(formula = fat ~ ., data = datos_train,
scale. = TRUE, validation = "CV")
modelo_pcr_CV <- MSEP(modelo_pcr, estimate = "CV")
modelo_pcr_CV <- MSEP(modelo_pcr_cv, estimate = "CV")
which.min(modelo_pcr_CV$val)
predict(modelo_pcr_cv, newdata = datos_test, ncomp = 21)
(ecm_pcr_cv_test <- mean((predict(modelo_pcr_cv, newdata = datos_test, ncomp = 21) - datos_test$fat)^2))
(ecm_pcr_cv_test <- mean((predict(modelo_pcr_cv, newdata = datos_test, ncomp = which.min(modelo_pcr_CV$val)) - datos_test$fat)^2))
(ecm_forward_test <- mean((predict(modelo_forward, newdata = datos_test) - datos_test$fat)^2))
(ecm_pcr_test <- mean((predict(modelo_pcr, newdata = datos_test, ncom = 4) - datos_test$fat)^2))
(ecm_pcr_cv_test <- mean((predict(modelo_pcr_cv, newdata = datos_test,
ncomp = which.min(modelo_pcr_CV$val)) - datos_test$fat)^2))
## Datos
library(ISLR)
glimpse(Hitters)
library(tidyverse)
library(dplyr)
library(ggplot2)
## Datos
library(ISLR)
glimpse(Hitters)
## Forward stepwise regression
library(leaps)
mejores_modelos_forward <- regsubsets(Salary~., data = Hitters,
nvmax = ncol(Hitters)-1,
method = "forward")
summary(mejores_modelos_forward)$which
summary(mejores_modelos_forward) %>% names
summary(mejores_modelos_forward)$which
resumen_forward <- summary(mejores_modelos_forward)
resumen_forward
graf_metricas <- function(x){
data.frame(n_predictores = 1:19,
metrica = resumen_forward[[x]]) %>%
ggplot(aes(x = n_predictores, y = metrica)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks = c(0:19)) +
theme_minimal() +
labs(x = NULL, y = NULL, title = x)
}
graf_forward <- map(names(resumen_forward)[4:6], graf_metricas)
library(purrr)
graf_forward <- map(names(resumen_forward)[4:6], graf_metricas)
graf_forward[[1]] / graf_forward[[2]] / graf_forward[[3]]
library(patchwork)
graf_forward[[1]] / graf_forward[[2]] / graf_forward[[3]]
graf_forward[[1]]
graf_forward[[2]]
graf_forward[[3]]
##------
## LASSO
##------
library(glmnet)
datos <- Hitters %>%
filter(!is.na(Salary))
x <- model.matrix(Salary~., data = datos)[,-1]
y <- datos %>% pull(Salary)
modelos_lasso <- glmnet(x = x, y = y, alpha = 1)
plot(modelos_lasso, xvar = "lambda", label = TRUE)
set.seed(1)
cv_error_lasso <- cv.glmnet(x = x, y = y, alpha = 1, nfolds = 10)
plot(cv_error_lasso)
# Estimar LASSO con "mejor lambda"
modelo_final_lasso <- glmnet(x = x,
y = y,
alpha = 1,
lambda = cv_error_lasso$lambda.1se)
coef(modelo_final_lasso)
##------------------------
## Componentes principales
##------------------------
library(pls)
pca <- x %>%
prcomp(scale = TRUE)
summary(pca)
prop_varianza <- cumsum(pca$sdev^2 / sum(pca$sdev^2))
data.frame(n_componentes = 1:19,
varianza = prop_varianza) %>%
ggplot(aes(x = n_componentes, y = varianza)) +
geom_line() +
geom_point() +
theme_minimal() + scale_x_continuous(breaks = 0:19)
## Datos
library(faraway)
names(meatspec)
summary(meatspec$fat)
#
library(yardstick)
set.seed(1)
#
library(yardstick)
set.seed(1)
split <- initial_split(data = meatspec, prop = 0.8)
tidymodels::tidymodels_packages()
#
library(rsample)
split <- initial_split(data = meatspec, prop = 0.8)
#
library(rsample)
set.seed(1)
split <- initial_split(data = meatspec, prop = 0.8)
datos_train <- training(split)
datos_test <- testing(split)
?read.csv
